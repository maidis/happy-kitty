--- src/Settings.py
+++ src/Settings.py
@@ -55,19 +55,19 @@
     else:
       raise RuntimeError("No usable options for %s.%s." % (section, option))
     Menu.Choice.__init__(self, text = o.text, callback = self.change, values = values, valueIndex = valueIndex)
-    
+
   def change(self, value):
     o = self.config.prototype[self.section][self.option]
-    
+
     if isinstance(o.options, dict):
       for k, v in o.options.items():
         if v == value:
           value = k
           break
-    
+
     self.changed = True
     self.value   = value
-    
+
     if self.autoApply:
       self.apply()
 
@@ -105,7 +105,7 @@
     o = self.config.prototype[self.section][self.option]
     v = self.config.get(self.section, self.option)
     return "%s: %s" % (o.text, pygame.key.name(keycode(v)).capitalize())
-    
+
   def change(self):
     o = self.config.prototype[self.section][self.option]
 
@@ -127,12 +127,13 @@
 
 class SettingsMenu(Menu.Menu):
   def __init__(self, engine):
+    self.engine = engine
     applyItem = [(_("Apply New Settings"), self.applySettings)]
 
     modSettings = [
       ConfigChoice(engine.config, "mods",  "mod_" + m) for m in Mod.getAvailableMods(engine)
     ] + applyItem
-    
+
     gameSettings = [
       (_("Mod settings"), modSettings),
       ConfigChoice(engine.config, "game",  "language"),
@@ -142,6 +143,10 @@
     ]
     gameSettingsMenu = Menu.Menu(engine, gameSettings + applyItem)
 
+    restartItem = [(_("Please restart the game"), lambda: self.engine.view.popLayer(self.restartMenu) )]
+    restartMenu = Menu.Menu(engine, restartItem)
+    self.restartMenu = restartMenu
+
     keySettings = [
       (_("Test Keys"), lambda: Dialogs.testKeys(engine)),
       KeyConfigChoice(engine, engine.config, "player", "key_action1"),
@@ -158,7 +163,7 @@
       KeyConfigChoice(engine, engine.config, "player", "key_cancel"),
     ]
     keySettingsMenu = Menu.Menu(engine, keySettings)
-    
+
     modes = engine.video.getVideoModes()
     modes.reverse()
     Config.define("video",  "resolution", str,   "640x480", text = _("Video Resolution"), options = ["%dx%d" % (m[0], m[1]) for m in modes])
@@ -196,7 +201,7 @@
       (_("Video Settings"),    videoSettingsMenu),
       (_("Audio Settings"),    audioSettingsMenu),
     ]
-  
+
     self.settingsToApply = settings + \
                            videoSettings + \
                            audioSettings + \
@@ -205,12 +210,14 @@
                            modSettings
 
     Menu.Menu.__init__(self, engine, settings)
-    
+
   def applySettings(self):
     for option in self.settingsToApply:
       if isinstance(option, ConfigChoice):
         option.apply()
-    self.engine.restart()
+
+    self.engine.view.pushLayer(self.restartMenu)
+    return
 
 class GameSettingsMenu(Menu.Menu):
   def __init__(self, engine):
